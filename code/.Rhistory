prob <- sum(prob_vector)
prob
?col
knitr::opts_chunk$set(echo = TRUE)
plot(scored, salary, col = position_fac)
knitr::opts_chunk$set(echo = TRUE)
rdata <- "https://github.com/ucb-stat133/stat133-fall-2018/raw/master/data/nba2018-salary-points.RData"
download.file(url = rdata, destfile = 'nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
#Age
length(age)
head(age)
tail(age)
summary(age)
#Experience
length(experience)
head(experience)
tail(experience)
summary(experience)
#Player
length(player)
head(player)
tail(player)
summary(player)
four <- head(player, n = 4)
#Extract all even elements in player
even_player <- player[seq(2, length(player), 2)]
#Extract all odd elements in salary
odd_salary <- salary[seq(1, length(salary), 2)]
#Extract all multiples of 5 of team
five_team <- team[seq(5, length(team), 5)]
#Extract all elements in positions 10, 20, 30, 40, etc of scored
ten_scored <- scored[seq(10, length(scored), 10)]
#Extract all the even elements in team but this time in reverse order
reverse <- team[seq(length(team), 2, -2)]
#Players in position Center, of Warriors (GSW)
player[intersect(which(position=="C"), which(team=="GSW"))]
#Players of both GSW (warriors) and LAL (lakers)
player[intersect(which(team=="LAL"), which(team=="GSW"))]
#players in positions Shooting Guard and Point Guards, of Lakers (LAL)
player[intersect(which(position=="SG"|position=="PG"), which(team=="LAL"))]
#subset Small Forwards of GSW and LAL
player[intersect(which(team=="GSW"|team=="LAL"), which(position=="SF"))]
#name of the player with largest salary
player[which.max(salary)]
#name of the player with smallest salary
player[which.min(salary)]
#name of the player with largest number of scored points
player[which.max(scored)]
#salary of the player with largest number of points
salary[which.max(scored)]
#largest salary of all Centers
max(salary[which(position=="C")])
#team of the player with the largest number of scored points
team[which.max(scored)]
#name of the player with the largest number of 3-pointers
player[which.max(points3)]
#Create warriors_player
warriors_player <- player[which(team=="GSW")]
#Create warriors_salary and warriors_points
warriors_salary <- salary[which(team=="GSW")]
warriors_points <- scored[which(team=="GSW")]
#Set names
names(warriors_salary) <- warriors_player
plot(scored, salary)
library(plotly)
#initial plot
plot(warriors_points, warriors_salary)
text(warriors_points, warriors_salary, labels = abbreviate(warriors_player))
#logging
log_scored <- log(warriors_points)
log_salary <- log(warriors_salary)
plot(log_scored, log_salary)
text(log_scored, log_salary, labels = abbreviate(warriors_player))
scored_points <- points1 + 2* points2 + 3* points3
position_fac <- factor(position)
#Positions of Warriors
position_fac[which(team=="GSW")]
#positions of players with salaries > 15 millions
position_fac[which(salary>15000000)]
#frequencies (counts) of positions with salaries > 15 millions
table(position_fac[which(salary>15000000)])
#relative frequencies (proportions) of 'SG' (Shooting Guards) in each team
table(team[which(position=="SG")])
plot(scored, salary, col = position_fac)
?cex
?plot
plot(scored, salary, col = position_fac, xlab = Points, ylab= Salary)
plot(scored, salary, col = position_fac, xlab = "Points"", ylab= "Salary"")
plot(scored, salary, col = position_fac, xlab = "Points, ylab= "Salary")
plot(scored, salary, col = position_fac, xlab = "Points", ylab= "Salary")
github <- 'https://github.com/ucb-stat133/stat133-fall-2018/'
repo <- 'raw/master/data/tents.RData'
download.file(url=paste0(github, repo), destfile = "tents.RData")
load("tents.RData")
ls()
?str
knitr::opts_chunk$set(echo = TRUE)
str(tent)
str(tent)
str(tent[1:5])
str(tent[1:3])
summary(price)
summary(price)
mean(price)
min(price)
max(price)
median(price)
summary(price)
mean(price)
min(price)
max(price)
median(price)
quartile(price)
summary(price)
mean(price)
min(price)
max(price)
median(price)
quantile(price)
type(bestuse)
class(bestuse)
class(season)
is.factor(bestuse)
is.factor(season)
is.factor(capacity)
is.factor(get(variable[1]))
is.factor(get(season[1]))
factor(season)
season_fact <- factor(season)
table(season_fact)
?table
ttt = table(season_fact)
ttt[3-season]
ttt(3-season)
ttt.get(3-season)
season_fact(3-season)
season_fact[3-season]
knitr::opts_chunk$set(echo = TRUE)
#Positions of Warriors
position_fac[which(team=="GSW")]
season_fact[which(season_fact = "3-season")]
season_fact[which(season_fact == "3-season")]
?count
table[1]
tab_season[1]
season_fact <- factor(season)
tab_season <- table(season_fact)
#Frequency of 3-season
tab_season[1]
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
tab_season[2]/length(season)
#Frequency of 4-season
tab_season[3]/length(season)
#Frequency of 3-4-season
tab_season[1]/length(season)
8/(4+78+8)
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
tab_season[2]/length(season)
#Frequency of 4-season
tab_season[3]/length(season)
#Frequency of 3-4-season
tab_season[1]/length(season)
#Describe the overall distribution
THe distribution is
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
tab_season[2]/length(season)
#Frequency of 4-season
tab_season[3]/length(season)
#Frequency of 3-4-season
tab_season[1]/length(season)
#Describe the overall distribution
#Te distribution is centred heavily on '3-season', which takes up ~87% of the total.
#Plot
barplot(tab_season)
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
tab_season[2]/length(season)
#Frequency of 4-season
tab_season[3]/length(season)
#Frequency of 3-4-season
tab_season[1]/length(season)
#Describe the overall distribution
#Te distribution is centred heavily on '3-season', which takes up ~87% of the total.
#Plot
freq_tab_season <- table(season_fact/length(season))
barplot(freq_tab_season/)
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
tab_season[2]/length(season)
#Frequency of 4-season
tab_season[3]/length(season)
#Frequency of 3-4-season
tab_season[1]/length(season)
#Describe the overall distribution
#Te distribution is centred heavily on '3-season', which takes up ~87% of the total.
#Plot
freq_tab_season <- table(season_fact/length(season))
barplot(freq_tab_season)
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
tab_season[2]/length(season)
#Frequency of 4-season
tab_season[3]/length(season)
#Frequency of 3-4-season
tab_season[1]/length(season)
#Describe the overall distribution
#Te distribution is centred heavily on '3-season', which takes up ~87% of the total.
#Plot
freq_tab_season <- table(season_fact)/length(season)
barplot(freq_tab_season)
?plot.new
?plot.window
?axis
?title
?points
?pch
?pch
knitr::opts_chunk$set(echo = TRUE)
plot.new()
plot.window(c(0, max(height)), c(0, max(price)))
axis(1, tick = TRUE)
axis(2, tick = TRUE)
title(main = "Scatterplot of Height and Price")
points(height, price, pch = ".", col = "red")
plot.new()
plot.window(c(0, max(height)), c(0, max(price)))
axis(1, tick = TRUE)
axis(2, tick = TRUE)
title(main = "Scatterplot of Height and Price")
points(height, price, pch = ".", col = "red", cex = 3)
plot.new()
plot.window(c(0, max(height)), c(0, max(price)))
axis(1, tick = TRUE)
axis(2, tick = TRUE)
title(main = "Scatterplot of Height and Price")
points(height, price, pch = ".", col = "red", cex = 3, xlab = "Height", ylab = "Price")
plot.new()
plot.window(c(0, max(height)), c(0, max(price)))
axis(1, tick = TRUE)
axis(2, tick = TRUE)
title(main = "Scatterplot of Height and Price", xlab = "Height", ylab = "Price")
points(height, price, pch = ".", col = "red", cex = 3)
plot.new()
plot.window(c(0, max(height)), c(0, max(price)))
axis(1, tick = TRUE)
axis(2, tick = TRUE)
title(main = "Scatterplot of Height and Price", xlab = "Height", ylab = "Price")
points(height, price, pch = ".", col = "red", cex = 3)
ls()
n
sum(height)
height-10
n <- length(height)
mean_x <- sum(height)/n
mean_y <- sum(price)/n
var_x <- sum((height-mean_x)^2)/(n-1)
var_y <- sum((price-mean_y)^2)/(n-1)
sd_x <- sqrt(var_x)
sd_y <- sqrt(var_y)
cov_xy <- sum((height-mean_x)*(price-mean_y))/(n-1)
corr_xy <- cov_xy/(sd_x*sd_y)
cov(height, price)
cov_xy
cor(height, price)
corr_xy
n <- length(height)
n
mean_x <- sum(height)/n
mean_x
mean_y <- sum(price)/n
mean_y
var_x <- sum((height-mean_x)^2)/(n-1)
var_x
var_y <- sum((price-mean_y)^2)/(n-1)
var_y
sd_x <- sqrt(var_x)
sd_x
sd_y <- sqrt(var_y)
sd_y
cov_xy <- sum((height-mean_x)*(price-mean_y))/(n-1)
cov_xy
corr_xy <- cov_xy/(sd_x*sd_y)
corr_xy
weight_lbs <- 0.00220462*weight_lbs
weight_lbs <- 0.00220462*weight
height_in <- 0.393701*height
#######
#How many tents have a price less than or equal to $300
length(which(price<=300))
quantile(height)
?percentile
quantile(height, probs = c(0.9))
weight_lbs <- 0.00220462*weight
height_in <- 0.393701*height
#######
#How many tents have a price less than or equal to $300
length(which(price<=300))
#How many tents have a price between $300 and $400
length(which(300<=price<=400))
weight_lbs <- 0.00220462*weight
height_in <- 0.393701*height
#######
#How many tents have a price less than or equal to $300
length(which(price<=300))
#How many tents have a price between $300 and $400
length(which(300<=price)&which(price<=400))
#Name of tent with maximum price
tent[which.max(price)]
#How many tents have a price>$400 and weight <1500 grams
length(intersect(which(price>400), which(weight<1500)))
#90th percentile for height
height_p90 = quantile(height, probs = c(0.9))
height_p90
#90th percenile for weight
weight_p90 = quantile(weight, probs = c(0.9))
weight_p90
#tents with height>height_p90 and weight>weight_p90
tent[intersect(which(height > height_p90), which(weight > weight_p90))]
?cut
?step
?cut
weight_cut <- cut(weight, breaks = seq(0, 9000, 1000), labels = ("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
weight_cut <- cut(weight, breaks = seq(0, 9000, 1000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
table(weight_cut)
?factor
season_fac <- factor(season, ordered = is.ordered(season))
season_fac
is.ordered(season)
season_fac <- factor(as.ordered(season))
season_fac
?as.ordered
season_fac <- factor(ordered(season))
season_fac
?ordered
season_fac <- factor(ordered(season), levels = c("3-season", "3-4-season", "4-season"))
season_fac
is.ordered(season)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
str(tent)
github <- 'https://github.com/ucb-stat133/stat133-fall-2018/'
repo <- 'raw/master/data/tents.RData'
download.file(
url = paste0(github, repo),
destfile = "tents.RData")
load("tents.RData")
knitr::opts_chunk$set(echo = TRUE)
str(tent)
str(tent[1:5])
str(tent[1:3])
summary(price)
mean(price)
min(price)
max(price)
median(price)
quantile(price)
season_fact <- factor(season)
tab_season <- table(season_fact)
tab_season
#Frequency of 3-season
tab_season[2]/length(season)
#Frequency of 4-season
tab_season[3]/length(season)
#Frequency of 3-4-season
tab_season[1]/length(season)
#Describe the overall distribution
#Te distribution is centred heavily on '3-season', which takes up ~87% of the total.
#Plot
freq_tab_season <- table(season_fact)/length(season)
barplot(freq_tab_season)
plot.new()
plot.window(c(0, max(height)), c(0, max(price)))
axis(1, tick = TRUE)
axis(2, tick = TRUE)
title(main = "Scatterplot of Height and Price", xlab = "Height", ylab = "Price")
points(height, price, pch = ".", col = "red", cex = 3)
n <- length(height)
n
mean_x <- sum(height)/n
mean_x
mean_y <- sum(price)/n
mean_y
var_x <- sum((height-mean_x)^2)/(n-1)
var_x
var_y <- sum((price-mean_y)^2)/(n-1)
var_y
sd_x <- sqrt(var_x)
sd_x
sd_y <- sqrt(var_y)
sd_y
cov_xy <- sum((height-mean_x)*(price-mean_y))/(n-1)
cov_xy
corr_xy <- cov_xy/(sd_x*sd_y)
corr_xy
weight_lbs <- 0.00220462*weight
height_in <- 0.393701*height
#######
#How many tents have a price less than or equal to $300
length(which(price<=300))
#How many tents have a price between $300 and $400
length(which(300<=price)&which(price<=400))
#Name of tent with maximum price
tent[which.max(price)]
#How many tents have a price>$400 and weight <1500 grams
length(intersect(which(price>400), which(weight<1500)))
#90th percentile for height
height_p90 = quantile(height, probs = c(0.9))
height_p90
#90th percenile for weight
weight_p90 = quantile(weight, probs = c(0.9))
weight_p90
#tents with height>height_p90 and weight>weight_p90
tent[intersect(which(height > height_p90), which(weight > weight_p90))]
weight_cut <- cut(weight, breaks = seq(0, 9000, 1000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
table(weight_cut)
season_fac <- factor(ordered(season), levels = c("3-season", "3-4-season", "4-season"))
season_fac
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
nba2018 <- read_csv("../Data/nba2018.csv")
library(dplyr)
library(ggplot2)
library(readr)
nba2018 <- read_csv("../Data/nba2018.csv")
sum(is.na(nba2018))
sum(is.na(nba2018$team))
sum(is.na(nba2018$position))
sum(is.na(nba2018$height))
sum(is.na(nba2018$weight))
sum(is.na(nba2018$birth_date))
sum(is.na(nba2018$country))
sum(is.na(nba2018$experience))
sum(is.na(nba2018$college))
sum(is.na(nba2018$salary))
sum(is.na(nba2018$rank))
sum(is.na(nba2018$age))
sum(is.na(nba2018$games))
sum(is.na(nba2018$games_started))
sum(is.na(nba2018$minutes))
sum(is.na(nba2018$field_goals))
sum(is.na(nba2018$field_goals_atts))
sum(is.na(nba2018$points3))
sum(is.na(nba2018$points3_atts))
sum(is.na(nba2018$points3_perc))
sum(is.na(nba2018$points2))
sum(is.na(nba2018$points2_atts))
sum(is.na(nba2018$points2_percs))
sum(is.na(nba2018$points2_perc))
sum(is.na(nba2018$effective_field_goal_perc))
sum(is.na(nba2018$points2))
sum(is.na(nba2018$points1))
sum(is.na(nba2018$points1_atts))
sum(is.na(nba2018$points1_perc))
sum(is.na(nba2018$off_rebounds))
sum(is.na(nba2018$def_rebounds))
sum(is.na(nba2018$assists))
sum(is.na(nba2018$steals))
sum(is.na(nba2018$blocks))
sum(is.na(nba2018$turnovers))
sum(is.na(nba2018$fouls))
sum(is.na(nba2018$points))
nba2018$experience["R"]
nba2018$experience[R]
nba2018$experience["9"]
nba2018$experience[experience == "R"]
nba2018$experience[nba2018$experience == "R"]
nba2018$experience <- is.character(nba2018$experience)
nba2018$experience <- as.integer(nba2018$experience)
library(dplyr)
library(ggplot2)
library(readr)
nba2018 <- read_csv("../Data/nba2018.csv")
nba2018$experience <- as.integer(nba2018$experience)
nba2018 <- read_csv("../Data/nba2018.csv")
nba2018$experience[nba2018$experience == "R"] <- 0
nba2018$experience <- as.integer(nba2018$experience)
nba2018$salary <- (nba2018$salary)/1000000
nba2018$position <- factor(nba2018$position)
?mutate
player == "Al Horford"
nba201$player == "Al Horford"
nba2018$player == "Al Horford"
yo <- nba2018$player == "Al Horford"
yo
nba2018$[yo]
nba2018$player[yo]
getwd()
getwd()
setwd(../workout1/code)
setwd("../workout1/code")
nba2018 <- mutate(nba2018, efficiency = (nba2018$points + nba2018$rebounds + nba2018$assists + nba2018$steals + nba2018$blocks
- nba2018$missed_fg - nba2018$missed_ft - nba2018$turnovers) / nba2018$games_played)
